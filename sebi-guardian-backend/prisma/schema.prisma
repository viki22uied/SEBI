// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  passwordHash     String
  role             Role     @default(INVESTOR)
  riskScore        Int      @default(0)
  settings         Json?
  badges           Json?
  trustedContacts  TrustedContact[]
  reports          FraudReport[]
  alerts           Alert[]
  learningProgress LearningProgress[]
  auditLogs        AuditLog[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model FraudReport {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       String
  details    String
  status     String   @default("Submitted")
  createdAt  DateTime @default(now())
}

model Alert {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  riskLevel   String
  createdAt   DateTime @default(now())
}

model LearningProgress {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  moduleId     String
  progress     Int      @default(0)
  badgeEarned  Boolean  @default(false)
  updatedAt    DateTime @updatedAt

  @@unique([userId, moduleId], name: "userId_moduleId")
}

model TrustedContact {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  email     String
  createdAt DateTime @default(now())
}

enum Role {
  INVESTOR
  ADMIN
}

model AuditLog {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  route      String
  ip         String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
}
